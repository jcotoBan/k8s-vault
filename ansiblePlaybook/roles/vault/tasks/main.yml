---

- name: Create a Kubernetes Namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: vault

- name: Pull Vault helm repo
  git:
    repo: https://github.com/hashicorp/vault-helm.git
    dest: /tmp/k8s-vault/ansiblePlaybook/vault-helm


- name: Deploy Vault on with local values
  kubernetes.core.helm:
    name: vault
    chart_ref: /tmp/k8s-vault/ansiblePlaybook/vault-helm
    release_namespace: vault
    values_files:
    - /tmp/k8s-vault/ansiblePlaybook/vault-helm/values.yaml


- name: wait till the Pod vault-0 is Ready
  pause:
    minutes: 3

- name: execute vault init and get output
  kubernetes.core.k8s_exec:
    namespace: vault
    pod: vault-0
    command: vault operator init
  register: command_output
  retries: 30
  delay: 10

- name: Set environment variables for vault setup
  set_fact:
    unseal_key_1: "{{ command_output.stdout_lines[0] | regex_replace('Unseal Key 1: ', '') }}"
    unseal_key_2: "{{ command_output.stdout_lines[1] | regex_replace('Unseal Key 2: ', '') }}"
    unseal_key_3: "{{ command_output.stdout_lines[2] | regex_replace('Unseal Key 3: ', '') }}"
    initial_root_token: "{{ command_output.stdout_lines[6] | regex_replace('Initial Root Token: ', '') }}"


- name: execute vault unseal key 1
  kubernetes.core.k8s_exec:
    namespace: vault
    pod: vault-0
    command: vault operator unseal "{{ unseal_key_1 }}"

- name: execute vault unseal key 2
  kubernetes.core.k8s_exec:
    namespace: vault
    pod: vault-0
    command: vault operator unseal "{{ unseal_key_2 }}"

- name: execute vault unseal key 3
  kubernetes.core.k8s_exec:
    namespace: vault
    pod: vault-0
    command: vault operator unseal "{{ unseal_key_3 }}"

- name: execute initial login
  kubernetes.core.k8s_exec:
    namespace: vault
    pod: vault-0
    command: vault login "{{ initial_root_token }}"

- name: create vault file
  blockinfile:
    path: /tmp/vault-policy
    create: true  
    block: |
      path "*"                                                  
      {  capabilities = ["read"]                
      } 


- name: Copy policy to container
  kubernetes.core.k8s_cp:
    namespace: vault
    pod: vault-0
    remote_path: /tmp/vault-policy
    local_path: /tmp/vault-policy


- name: apply vault policy
  kubernetes.core.k8s_exec:
    namespace: vault
    pod: vault-0
    command: vault policy write demo-policy /tmp/vault-policy


- name: enable k8s auth
  kubernetes.core.k8s_exec:
    namespace: vault
    pod: vault-0
    command: vault auth enable kubernetes


- name: Gather Kubernetes API Server Address
  command: kubectl exec vault-0 -n vault -- printenv | grep KUBERNETES_PORT_443_TCP_ADDR | cut -f 2- -d "=" | tr -d " "
  register: k8s_host_result
  ignore_errors: true

- name: Gather Kubernetes CA Certificate
  command: kubectl config view --raw --minify --flatten -o jsonpath='{.clusters[].cluster.certificate-authority-data}'
  register: k8s_cacert_result
  ignore_errors: true

- name: gather service account secret name
  command: kubectl get serviceaccount vault -n vault -o jsonpath='{.secrets[0].name}'
  register: secret_name_result
  ignore_errors: true

- name: Gather Token from Secret
  command: kubectl get secret {{ secret_name_result.stdout }} -n vault -o jsonpath='{.data.token}'
  register: tr_account_token_result
  ignore_errors: true

- name: set vault env for k8s auth
  set_fact:
    k8s_host: "{{ k8s_host_result.stdout }}"
    k8s_port: "443"
    k8s_cacert: "{{ k8s_cacert_result.stdout | b64decode }}"
    secret_name: "{{ secret_name_result.stdout }}"
    tr_account_token: "{{ tr_account_token_result.stdout | b64decode }}"

- name: write vault authentication
  kubernetes.core.k8s_exec:
    namespace: vault
    pod: vault-0
    command: vault write auth/kubernetes/config token_reviewer_jwt="{{ tr_account_token }}" kubernetes_host="https://{{ k8s_host }}:{{ k8s_port }}" kubernetes_ca_cert="{{ k8s_cacert }}" disable_issuer_verification=true

#External secrets setup

- name: Create a Kubernetes Namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: external-secrets

- name: Add external-secrets chart repo
  kubernetes.core.helm_repository:
    name: external-secrets
    repo_url: "https://charts.external-secrets.io"

- name: Deploy External-secrets chart using values files on target
  kubernetes.core.helm:
    name: external-secrets
    chart_ref: external-secrets/external-secrets
    release_namespace: external-secrets 

- name: gather external dns service account secret name
  command: kubectl get serviceaccount external-secrets -n external-secrets -o jsonpath='{.secrets[0].name}'
  register: demo_secret_name_result
  ignore_errors: true

- name: set vault env for edns secret name 
  set_fact:
    demo_secret_name: "{{ demo_secret_name_result.stdout }}"

- name: gather external dns service account token 
  command: kubectl get secret "{{ demo_secret_name }}" -n external-secrets -o jsonpath='{.data.token}'
  register: demo_account_token_result
  ignore_errors: true

- name: set vault env for edns token name 
  set_fact:
    demo_account_token: "{{ demo_account_token_result.stdout | b64decode }}"

- name: Write auth endpoint
  kubernetes.core.k8s_exec:
    namespace: vault
    pod: vault-0
    command: vault write auth/kubernetes/role/demo-role bound_service_account_names=external-secrets bound_service_account_namespaces=external-secrets policies=demo-policy ttl=24h


- name: Write auth endpoint token 
  kubernetes.core.k8s_exec:
    namespace: vault
    pod: vault-0
    command: vault write auth/kubernetes/login role=demo-role jwt="{{ demo_account_token }}" iss=https://kubernetes.vault.svc.cluster.local


- name: Create a Kubernetes SecretStorre
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: external-secrets.io/v1beta1
      kind: SecretStore
      metadata:
        name: vault-backend
      spec:
        provider:
        vault:
          server: "http://vault.vault:8200"
          path: "kv"
          version: "v2"
          auth:
            kubernetes:
              mountPath: "kubernetes"
              role: "demo-role"

- name: Create a Kubernetes ExternalSecret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: external-secrets.io/v1beta1
      kind: ExternalSecret
      metadata:
        name: vault-example
      spec:
        secretStoreRef:
          name: vault-backend
          kind: SecretStore
        target:
          name: example-sync
        data:
        - secretKey: foobar
          remoteRef:
            key: path/to/my/secret
            property: password
      